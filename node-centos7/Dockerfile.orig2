# ------------------------------------------------------------------------------
# Common part
# ------------------------------------------------------------------------------

# === Stage 1 ===

FROM centos:7 as builder

# Setup environment variables
ENV VERSION="5.10.4" \
    PKG_VERSION=1 \
    BUILD_DIR="/tmp/build" \
    BUILD_DIR_SPKG="/tmp/spkg" \
    MOCK_DIR_GEMS="/tmp/mobuild" \
    CONTACT="Unsupported Community Build" \
    GIT_VERSION="not known" \
    DISTRO=centos7 \
    GEMFILE_LOCK='CentOS7' \
    URL="opennebula-5.10.4.tar.gz" \
    PKG_VERSION="5.10.4" \
    SPEC="centos7.spec" \
    PACKAGES_DIR="/packages-5.10.4" \
    SOURCES_DIR="/packages-5.10.4/sources" \
    SOURCE="$(basename ${URL})" \
    PACKAGE="opennebula-5.10.4" \
    NAME="$(echo ${PACKAGE} | cut -d'-' -f1)" \
    CONTACT="${CONTACT:-Unsupported Community Build}" \
    BASE_NAME="${NAME}-${VERSION}-${PKG_VERSION}" \
    GEMS_RELEASE="${VERSION}_${PKG_VERSION}.${DIST_TAG}" \
    GIT_VERSION="${GIT_VERSION:-not known}"
    #DATE=$(date +'%a %b %d %Y')
RUN mkdir -p /tmp/{spkg,build,mobuild}
#RUN source /test.sh
# Install build dependencies
RUN yum install -y epel-release
RUN yum update -y \
 && yum install -y npm rpm-build gcc-c++ libcurl-devel libxml2-devel xmlrpc-c-devel openssl-devel \
mysql-devel sqlite-devel openssh pkgconfig ruby scons sqlite-devel xmlrpc-c java-1.7.0-openjdk-devel \
ruby-devel createrepo wget make npm git augeas augeas-libs which m4 rpmbuild

# Download sources
COPY packages-release-5.10.4.tar.gz ./packages-release-5.10.4.tar.gz
RUN wget -q -O - "https://github.com/OpenNebula/one/archive/release-$VERSION.tar.gz" | tar -xvzf - \
 && mv /one-release-$VERSION /opennebula-$VERSION \
# && wget -q -O - "https://github.com/OpenNebula/packages/archive/release-$VERSION.tar.gz" | tar -xvzf - \
 && tar xvzf /packages-release-5.10.4.tar.gz && mv /packages-release-5.10.4 /packages-5.10.4 \
 && gem install ronn

WORKDIR /opennebula-$VERSION

# Apply patches
RUN wget -q -O - "https://github.com/OpenNebula/one/pull/4585.diff" | patch -p1

# Build docs
RUN cd share/man \
 && ./build.sh

# Build Sunstone
RUN cd src/sunstone/public \
 && ./build.sh -d \
 && export PATH=$PATH:$PWD/node_modules/.bin \
 && ./build.sh \
 && rm -rf node_modules/

# Prepare sources
#RUN source /test.sh
RUN tar -czf /opennebula-${VERSION}.tar.gz /opennebula-${VERSION} \
&& cp -r /packages-$VERSION/templates/$DISTRO/ /centos7 \
&& cp "${PACKAGES_DIR}/templates/${DISTRO}"/* "${BUILD_DIR_SPKG}" \
&& cd "${BUILD_DIR_SPKG}" \
&& wget -q http://downloads.opennebula.org/extra/xmlrpc-c.tar.gz \
&& cp "${SOURCES_DIR}/build_opennebula.sh" . \
&& cp "${SOURCES_DIR}/xml_parse_huge.patch" . \
&& cp -r "/$PACKAGE" . \
&& mkdir -p /data \
&& ln -s ${PACKAGES_DIR} /data/packages \
&& ln -s ${BUILD_DIR_SPKG} /data/source \
&& ln -s ${MOCK_DIR_GEMS} /data/build \
#&& cd / \
&& tar cvzf /opennebula-$VERSION.tar.gz /opennebula-$VERSION \
&& yes|cp /opennebula-$VERSION.tar.gz "/data/source/"

RUN echo '***** Building Ruby gems' >&2 \
      &&  '/data/packages/rubygems/build.sh' \
            "/data/source/$(basename ${URL})" \
            "/data/build" \
            "${GEMFILE_LOCK}" \
            "${VERSION}" \
            "${CONTACT}"

RUN for F in /data/build/opennebula-rubygem-*.rpm; do \
        _NAME=$(rpm -qp "${F}" --queryformat '%{NAME}\n') \
        _VERS=$(rpm -qp "${F}" --queryformat '%{VERSION}\n') \
        _REL=$(rpm -qp "${F}" --queryformat '%{RELEASE}\n') \

        RUBYGEMS_REQ="${RUBYGEMS_REQ}Requires: ${_NAME} = ${_VERS}-${_REL}"$'\n'; \
    done \
#< <(rpm -qp /data/build/opennebula-rubygem-*.rpm --queryformat '%{NAME} %{VERSION} %{RELEASE}\n') \
&&    cp /data/build/opennebula-rubygem-*.rpm "${BUILD_DIR}"

RUN cd "${BUILD_DIR_SPKG}" \
&& _BUILD_COMPONENTS_UC=${BUILD_COMPONENTS^^} \
&& m4 -D_VERSION_="${VERSION}" \
    -D_PKG_VERSION_="${PKG_VERSION}" \
    -D_CONTACT_="${CONTACT}" \
    -D_DATE_="$(date +'%a %b %d %Y')" \
    -D_RUBYGEMS_REQ_="${RUBYGEMS_REQ}" \
    ${_BUILD_COMPONENTS_UC:+ -D_WITH_${_BUILD_COMPONENTS_UC//[[:space:]]/_ -D_WITH_}_} \
    "${DISTRO}.spec.m4" >"${SPEC}" \
&& yum install -y $(cat centos7.spec | grep BuildRequires | awk '{print $2}') \
&& sed -i 's/mv xmlrpc-c ../#mv xmlrpc-c ../g' build_opennebula.sh \
&& mkdir -p ~/rpmbuild/ \
&& rm -rf /root/rpmbuild/SOURCES \
&& rm -rf /root/rpmbuild/RPMS \
&& ln -s /data/source /root/rpmbuild/SOURCES \
&& ln -s /data/build /root/rpmbuild/RPMS
RUN rpmbuild -ba "${BUILD_DIR_SPKG}/${SPEC}" && yum install -y $(cat $BUILD_DIR_SPKG/$SPEC | grep BuildRequires | awk '{print $2}')
RUN mkdir -p /data/allrpms && find / -iname "opennebula*.rpm" -exec mv {} /data/allrpms \;
# === Stage 2 ===

FROM centos:7

# ------------------------------------------------------------------------------
# Specific part
# ------------------------------------------------------------------------------

# Install opennebula-node
RUN mkdir -p /allrpms
COPY --from=builder /data/allrpms/* /allrpms/
RUN yum -y install createrepo && cd /allrpms && createrepo . \ 
&& echo "[opennebula5.10.4]" > /etc/yum.repos.d/opennebula5.10.4.repo \
&& echo "name=opennebula5.10.4" >> /etc/yum.repos.d/opennebula5.10.4.repo \
&& echo "baseurl=file:///allrpms" >> /etc/yum.repos.d/opennebula5.10.4.repo \
&& echo "gpgcheck=0" >> /etc/yum.repos.d/opennebula5.10.4.repo \
&& echo "enabled=1" >> /etc/yum.repos.d/opennebula5.10.4.repo
RUN yum -y install epel-release && yum -y update && yum -y install opennebula-node-kvm \
&& rm -rf /allrpms && rm /etc/yum.repos.d/opennebula5.10.4.repo && yum -y erase epel-release \
&& yum -y erase createrepo && yum -y clean all
ENV TCP_PORT=16509
RUN curl --silent https://raw.githubusercontent.com/abn/dockerfiles/master/scripts/docker-install-libvirtd.sh \
    | bash \
&& sed -i "/Service/a ExecStartPost=\/bin\/chmod 666 /dev/kvm" /usr/lib/systemd/system/libvirtd.service

EXPOSE ${TCP_PORT}
COPY docker-entrypoint.sh ./docker-entrypoint.sh
COPY libvirtd.sh ./libvirtd.sh
COPY virt-install ./virt-install
COPY virt-install.repo ./etc/yum.repos.d/virt-install.repo
RUN chmod +x /libvirtd.sh && mkdir /conf \ 
&& cp -rf /etc/libvirt /conf \
&& chmod +x /docker-entrypoint.sh \
&& echo "devpts /dev/pts devpts gid=5,mode=620 0 0" > /etc/fstab
#VOLUME ["/etc/libvirt"]
VOLUME ["/var/lib/libvirt"]
#VOLUME [ "/sys/fs/cgroup" ]
ENTRYPOINT ["./docker-entrypoint.sh"]
